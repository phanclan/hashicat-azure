# Define the name of the Actions workflow ‚Äî Terraform.
name: "Terraform"

# Only run when a commit is pushed to the master branch or on any pull requests.
on:
  push:
    branches:
      - master
  pull_request:

# Defines a terraform job with 8 steps.
jobs:
  terraform:
    name: "Terraform"
    # Virtual environment OS.
    runs-on: ubuntu-latest
    # runs-on: self-hosted
    steps:
      # Checkout the repo to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2

      # Download Terraform. Default to latest. Can specify version with "terraform_version".
      # Specify a Terraform Cloud user API token
      - name: Terraform Setup
        uses: hashicorp/setup-terraform@v1
        with:
          # If needed, pin terraform version.
          # terraform_version: ~0.13.7
          cli_config_credentials_hostname: 'app.terraform.io'
          # TF_API_TOKEN stored as GitHub Secret
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        # run: terraform fmt -recursive .

      # Initialize Terraform. Create initial files, loads any remote state, downloads modules, etc.
      - name: Terraform Init
        id: init
        run: terraform init -input=false

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Validate
        id: validate
        run: terraform validate

      # Generates a plan. This step only runs on PR's. On merge, the plan will be applied.
      # The id value is used for reference in the comment step via "steps.plan.outputs.stdout"
      # Note: Color is disabled to prevent messy characters from appearing in the pull request comment
      # Continue even if error. Allows next to display error message.
      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        continue-on-error: true

      # Add a comment to the pull request with the results of the format, init and plan steps.
      # Display the plan output. Allows you to review results of the plan directly in PR instead of going to TFC.
      # Only runs on pull requests.
      - name: Update Pull Request
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      # Highlight whenever a plan fails because the "Terraform Plan" step continues on error.
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      # On push to master, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud".
      # See the documentation on "strict" required status checks for more information:
      # https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      # This step will only run when a commit is pushed to master.
      - name: Terraform Apply
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: terraform apply -input=false -auto-approve
